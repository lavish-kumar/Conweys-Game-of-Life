{"version":3,"sources":["components/site-loader/SiteLoader.module.css","components/Loader/None Blue Ani.svg","components/site-loader/SiteLoader.js","components/HOC/withSplashScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SiteLoader","className","loaderStyles","src","loadersvg","alt","withSplashScreen","numRows","numCols","operations","generateEmptyGrid","rows","i","push","Array","from","WrappedComponent","props","state","loading","setTimeout","setState","err","console","log","this","Component","useState","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","style","height","display","justifyContent","alignItems","color","onClick","Math","random","gridTemplateColumns","map","col","key","newGrid","width","backgroundColor","undefined","border","borderRadius","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8fdf7490.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"SiteLoader_App__2ds8q\",\"App-logo\":\"SiteLoader_App-logo__Fks70\",\"App-header\":\"SiteLoader_App-header__1Ds2k\",\"App-link\":\"SiteLoader_App-link__xWHSF\"};","module.exports = __webpack_public_path__ + \"static/media/None Blue Ani.136fc006.svg\";","import React from 'react'\r\nimport loaderStyles from './SiteLoader.module.css';\r\nimport loadersvg from '../../components/Loader/None Blue Ani.svg'\r\nexport default function SiteLoader() {\r\n    return (\r\n        <div className={loaderStyles[\"App\"]}>\r\n        <header className={loaderStyles[\"App-header\"]}>\r\n          <img src={loadersvg} className={loaderStyles[\"App-logo\"]} alt=\"logo\" />\r\n        </header>\r\n      </div>\r\n    )\r\n}\r\n","import React, {Component} from 'react';\r\nimport SiteLoader from \"../site-loader/SiteLoader\"\r\n\r\nfunction LoadingMessage() {\r\n  return (\r\n    <SiteLoader/>\r\n  );\r\n}\r\n\r\nfunction withSplashScreen(WrappedComponent) {\r\n  return class extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        loading: true,\r\n      };\r\n    }\r\n\r\n     componentDidMount() {\r\n      try {\r\n        setTimeout(() => {\r\n          this.setState({\r\n            loading: false,\r\n          });\r\n        }, 2500)\r\n      } catch (err) {\r\n        console.log(err);\r\n        this.setState({\r\n          loading: false,\r\n        });\r\n      }\r\n    }\r\n\r\n    render() {\r\n      // while checking user session, show \"loading\" message\r\n      if (this.state.loading) return LoadingMessage();\r\n\r\n      // otherwise, show the desired route\r\n      return <WrappedComponent {...this.props} />;\r\n    }\r\n  };\r\n}\r\n\r\nexport default withSplashScreen;","import React, { useState,useCallback,useRef } from 'react'\nimport './App.css';\nimport produce from 'immer'\nimport withSplashScreen from \"./components/HOC/withSplashScreen\"\nconst numRows = 20;\nconst numCols = 50;\n\nconst operations = [\n  [0,1],\n  [0,-1],\n  [-1,-1],\n  [-1,0],\n  [-1,1],\n  [1,-1],\n  [1,0],\n  [1,1]\n]\n\nconst generateEmptyGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n\n  return rows;\n};\n\nfunction App () {\n\n  const [grid, setGrid] = useState(() => {\n    return generateEmptyGrid();\n  });\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n\n    setGrid(g => {\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbors += g[newI][newK];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n\n    setTimeout(runSimulation, 100);\n  }, []);\n\n  return (\n    <>\n    <div >\n      <div style={{\n      height:\"50px\",\n      display:\"flex\",\n    justifyContent:\"center\",\n    alignItems:\"center\"\n    }}>\n    <h1 style={{color:\"white\"}}>CONWEYS GAME OF LIFE | SIMULATION</h1>\n    </div>\n    <div style={{\n      height:\"100px\",\n      display:\"flex\",\n    justifyContent:\"center\",\n    alignItems:\"center\"\n    }}>\n    <button\n        onClick={() => {\n          setRunning(!running);\n          if (!running) {\n            runningRef.current = true;\n            runSimulation();\n          }\n        }}\n      >\n        {running ? \"STOP SIMULATION\" : \"START SIMULATION\"}\n      </button>\n      <button\n        onClick={() => {\n          const rows = [];\n          for (let i = 0; i < numRows; i++) {\n            rows.push(\n              Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0))\n            );\n          }\n\n          setGrid(rows);\n        }}\n      >\n        RANDOME INITIAL STATE\n      </button>\n      <button\n        onClick={() => {\n          setGrid(generateEmptyGrid());\n        }}\n      >\n        CLEAR / RESET GRID\n      </button>\n      </div>\n    </div>\n        <div style={{\n          display:\"flex\",\n          justifyContent:\"center\",\n          alignItems:\"center\"}}>\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${numCols}, 0fr)`\n        }}\n      >\n        {grid.map((rows, i) =>\n          rows.map((col, k) => (\n            <div\n              key={`${i}-${k}`}\n              onClick={() => {\n                const newGrid = produce(grid, gridCopy => {\n                  gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: grid[i][k] ? \" #008CBA\" : undefined,\n                border: \"solid 1px grey\",\n                borderRadius:\"1px\"\n                \n              }}\n            />\n          ))\n        )}\n      </div>\n      </div>\n    </>)\n}\n\nexport default withSplashScreen(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}